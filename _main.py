from vkbottle.bot import Bot, Message, BotLabeler
from vkbottle import API, BaseStateGroup, VKAPIError, VKAPIError, BaseMiddleware
from mcrcon import MCRcon
import asyncio
import json

from _permission_rule import Permission
from settings import token, rcon_pass, rcon_address, owner_id, prefix_cmd

# –¢–æ–∫–µ–Ω –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ settings.py
bot = Bot(token)


# –ë–æ—Ç –Ω–µ –±—É–¥–µ—Ç –æ—Ç–≤–µ—á–∞—Ç—å, –µ—Å–ª–∏ –Ω–∞–ø–∏—à–µ—Ç –≥—Ä—É–ø–ø–∞
class NoBotMiddleware(BaseMiddleware[Message]):
    async def pre(self):
        if self.event.from_id < 0:
            self.stop("–ì—Ä—É–ø–ø–∞–º –Ω–µ —Ä–∞–∑—Ä–µ—à–µ–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª.")


# ------------------------.—Å–µ—Ä–≤–µ—Ä –¥–æ–±–∞–≤–∏—Ç—å--------------------------------

def w_server(new_data):
    with open('servers.json', 'r+', encoding='utf-8') as file:
        file_data = json.load(file)
        for i in file_data['servers']:
            file_data["servers"].append(new_data)
            file.seek(0)
            json.dump(file_data, file, indent=4, ensure_ascii=False)
            break

def easy_already_server(name_server):
    with open('servers.json', encoding='utf-8') as json_file:
        data = json.load(json_file)
        for i in data['servers']:
            if i['name'] == str(name_server):
                return True

@bot.on.private_message(Permission(), text='{0}—Å–µ—Ä–≤–µ—Ä –≥–µ–Ω <name> <ip> <passw>'.format(prefix_cmd))
async def cmd_add_server(message: Message, name, ip, passw):

    try:
        # –µ—Å–ª–∏ name —Å—É—â–µ—Å—Ç–≤—É–µ—Ç == True:

        if easy_already_server(name_server=name) == True:
             await message.reply('‚ö† | –¢–∞–∫–æ–µ –∏–º—è —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç')
        else:
            y = {
                "name": name,
                "rcon_ip": ip,
                "rcon_pass": passw
            }
            w_server(y)
            await message.reply('‚ôª | –°–µ—Ä–≤–µ—Ä {0}, —Å–æ –∑–Ω–∞—á–µ–Ω–∏—è–º–∏: \n- –ü–∞—Ä–æ–ª—å {1}\n- –ê–π–ø–∏ {2}\n\n–ë—ã–ª –¥–æ–±–∞–≤–ª–µ–Ω!'.format(name, passw, ip))
    except Exception as e:
        await message.reply(e)


# --------------------------------------------------------





# ------------------------.—Å–µ—Ä–≤–µ—Ä–∞--------------------------------

def all_servers():
    with open("servers.json", "r+", encoding='utf-8') as jsonFile:
        data = json.load(jsonFile)
    servers = ''
    for i in data['servers']:
        servers += '| {0} / {1},\n'.format(i['name'], i['rcon_ip'])
    return servers


@bot.on.private_message(Permission(), text='{0}—Å–µ—Ä–≤–µ—Ä–∞'.format(prefix_cmd))
async def cmd_all_servers(message: Message):
    await message.reply("‚ôª | –í—Å–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ —Å–µ—Ä–≤–µ—Ä–∞: \n" +
                        all_servers())


# --------------------------------------------------------

def easy_check_server(name_server, ret: ('bool', 'ip', 'passw') = None):
    with open('servers.json', encoding='utf-8') as json_file:
        data = json.load(json_file)
        for i in data['servers']:
            # –ï—Å–ª–∏ name_server –µ—Å—Ç—å –≤ i['name']
            if i['name'] == name_server:
                ip = i['rcon_ip']
                passw = i['rcon_pass']
                match ret:
                    case 'bool':
                        return True
                    case 'ip':
                        return ip
                    case 'passw':
                        return passw

@bot.on.private_message(Permission(), text='{0}<server> <cmd>'.format(prefix_cmd))
async def cmd_send(message: Message, server, cmd):
    try:
        if easy_check_server(name_server=server, ret='bool') == True:
            r_a = easy_check_server(name_server=server, ret='ip')
            r_p = easy_check_server(name_server=server, ret='passw')
            with MCRcon(r_a, r_p) as mcr:
                resp = mcr.command(cmd)
                await message.reply('üóÇ | –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –∫–æ–º–∞–Ω–¥–∞: /{0}\n'.format(cmd) +
                                        '–û—Ç–≤–µ—Ç: \n{0}'.format(resp))
        elif easy_check_server(name_server=server) != True:
                await message.reply('‚ùó | –°–µ—Ä–≤–µ—Ä–∞ {0}, –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç!'.format(server))
    except OSError:
        await message.reply('‚ùó | –°–µ—Ä–≤–µ—Ä {0}, –Ω–µ –æ—Ç–≤–µ—á–∞–µ—Ç –∑–∞–ø—Ä–æ—Å—É'.format(server))
    except Exception as e:
        await message.reply(e)

@bot.on.private_message(Permission(), text='{0}–ø–æ–º–æ—â—å'.format(prefix_cmd))
async def cmd_send(message: Message):
    await message.reply('üìú | –ö–æ–º–∞–Ω–¥—ã: \n'
                        '{0}—Å–µ—Ä–≤–µ—Ä–∞ - –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –≤—Å–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ rcon —Å–µ—Ä–≤–µ—Ä–∞.\n'.format(prefix_cmd) +
                        '{0}<server> <cmd> - –ó–∞–ø—Ä–æ—Å —Ä–∫–æ–Ω –∫–æ–º–∞–Ω–¥—ã.\n'.format(prefix_cmd) +
                        '{0}—Å–µ—Ä–≤–µ—Ä –≥–µ–Ω <name> <ip> <passw> - –°–æ–∑–¥–∞–µ—Ç —Ä–∫–æ–Ω —Å–µ—Ä–≤–µ—Ä.'.format(prefix_cmd))
                        #'{0}—Å–µ—Ä–≤–µ—Ä –∏–ø <name> <ip> <new_ip> - –ü–µ—Ä–µ–∏–º–µ–Ω–æ–≤—ã–≤–∞–µ—Ç –∑–Ω–∞—á–µ–Ω–∏ ip –Ω–∞ —Ä–∫–æ–Ω —Å–µ—Ä–≤–µ—Ä–µ.'.format(prefix_cmd) +
                        #'{0}—Å–µ—Ä–≤–µ—Ä –ø–∞—Å—Å <name> <pass> <new_pass> - –ü–µ—Ä–µ–∏–º–µ–Ω–æ–≤—ã–≤–∞–µ—Ç –∑–Ω–∞—á–µ–Ω–∏ pass –Ω–∞ —Ä–∫–æ–Ω —Å–µ—Ä–≤–µ—Ä–µ.'.format(prefix_cmd))

# –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –∫–ª–∞—Å—Å NoBotMiddleware
bot.labeler.message_view.register_middleware(NoBotMiddleware)
# Start
bot.run_forever()
